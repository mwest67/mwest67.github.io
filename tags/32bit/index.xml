<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>32bit on Generic title here..</title>
    <link>/tags/32bit/</link>
    <description>Recent content in 32bit on Generic title here..</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 21 Mar 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/32bit/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SLAE Tcp Bind Shell</title>
      <link>/2017/03/slae-tcp-bind-shell/</link>
      <pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/03/slae-tcp-bind-shell/</guid>
      <description>SLAE The SecurityTube Linux Assembly Expert is a course and certification from the folks over at http://www.securitytube-training.com and also available on http://www.pentesteracademey.com.
This blog post is the first post required for the exam requirements. My student id is: PA-4897 and the github url to my repo is https://github.com/mwest67/slae.
Getting started Our first task is to create a tcp bind shell in shellcode. In order to do this lets first understand what a bind shell is.</description>
    </item>
    
    <item>
      <title>Buffer overflows (Level 1)</title>
      <link>/2016/11/buffer-overflow-level-1/</link>
      <pubDate>Thu, 03 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/11/buffer-overflow-level-1/</guid>
      <description>What is Smashing the Stack You may have heard the term buffer overflow or smashing the stack but what does this mean? Simply this just means that a program hasnt checked its inputs and important data on the stack has been overwritten (such as a functions return address). Lets have a quick look at what a functions stack frame may look like
3: Arguments 2: local buffer (64 chars) 1: Frame Pointer 0: Return Address  So if the program is vulnerable and doesnt do any bounds checking when writing data into the local buffer then that data can literally overflow the buffer overwriting the values that come after it (such as the return address).</description>
    </item>
    
    <item>
      <title>Crafting Shellcode</title>
      <link>/2016/11/crafting-shellcode/</link>
      <pubDate>Wed, 02 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/11/crafting-shellcode/</guid>
      <description>Intro Right! Let me start off by saying that this is not going to be and assembly code primer. This is just intended to a brief intro into the mindset needed to craft shellcode. There are blogs and resources more comprehensive than this post that explain things in greater detail, one such book is the Shellcoders Handbook.
This is just going to be a whrilwind tour, at the end of which you&amp;rsquo;ll have a highlevel view of the thought process that goes into crafting shellcode.</description>
    </item>
    
    <item>
      <title>Format Strings</title>
      <link>/2016/11/format-strings/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/11/format-strings/</guid>
      <description>Background Any of us who have been around a while will most likely will have done some C and will almost certainly come across the printf family of functions. Now printf and its cousins have the special ability of accepting a string argument which details how the data passed to it should be formatted, for example
#include &amp;lt;stdio.h&amp;gt; int main(int argc, char *argv[]) { if (argc == 2) { printf(&amp;#34;Received string: %s&amp;#34;, argv[1]); } } Save the file as hello.</description>
    </item>
    
  </channel>
</rss>
