<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>exploit on Generic title here..</title>
    <link>/tags/exploit/</link>
    <description>Recent content in exploit on Generic title here..</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 03 Nov 2016 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/exploit/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Buffer overflows (Level 1)</title>
      <link>/2016/11/buffer-overflow-level-1/</link>
      <pubDate>Thu, 03 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/11/buffer-overflow-level-1/</guid>
      <description>What is Smashing the Stack You may have heard the term buffer overflow or smashing the stack but what does this mean? Simply this just means that a program hasnt checked its inputs and important data on the stack has been overwritten (such as a functions return address). Lets have a quick look at what a functions stack frame may look like
3: Arguments 2: local buffer (64 chars) 1: Frame Pointer 0: Return Address  So if the program is vulnerable and doesnt do any bounds checking when writing data into the local buffer then that data can literally overflow the buffer overwriting the values that come after it (such as the return address).</description>
    </item>
    
    <item>
      <title>Format Strings</title>
      <link>/2016/11/format-strings/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/11/format-strings/</guid>
      <description>Background Any of us who have been around a while will most likely will have done some C and will almost certainly come across the printf family of functions. Now printf and its cousins have the special ability of accepting a string argument which details how the data passed to it should be formatted, for example
#include &amp;lt;stdio.h&amp;gt; int main(int argc, char *argv[]) { if (argc == 2) { printf(&amp;#34;Received string: %s&amp;#34;, argv[1]); } } Save the file as hello.</description>
    </item>
    
  </channel>
</rss>
